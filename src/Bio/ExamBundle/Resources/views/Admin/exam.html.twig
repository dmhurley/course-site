{% extends 'BioPublicBundle::main.html.twig' %}

{% block head %}
	{{ parent() }}
	{% javascripts 'bundles/bioexam/js/Loader.js' 'bundles/bioexam/js/Parser.js' output="js/*.js" %}
		<script src="{{asset_url}}"></script>
	{% endjavascripts %}

{% endblock %}


{% block content %}
	<div style="float:left; width:42%;">
		<h4>Add Exam</h4>
		{{ form(form) }}
	</div>
	{#<div style="float:left; width:58%">
		<h4>Global Settings</h4>
		{{ form(globalForm) }}
	</div>#}
	<table>
		<thead>
			<tr>
				<th>Name</th>
				<th>Section</th>
				<th>Date</th>
				<th>Start</th>
				<th>Questions</th>
				<th>Preview</th>
				<th>Edit</th>
				<th>Delete</th>
			</tr>
		</thead>
		<tbody>
			
		</tbody>
	</table>
{% endblock %}

{% block java %}
	<script>var loader = new Loader({
		'url': '{{ url('main_page')}}crud/',
		'bundle': 'exam',
		'entity': 'exam',
		'table': document.querySelector('table'),
		'buttons': {
			'preview': {
				'selector': '.button.preview',
				'event': 'click', //optional
				'fn': function(event, button, self) {
					window.open(self.parser.parse('{{url("preview")}}?id=#{id}&type=exam', button), '_blank')
				}
			},
			'edit': {
				'selector': '.button.edit',
				'fn': function(event, button, self) {
					console.log('editing', event);
				}
			},
			'delete': {
				'selector': '.button.delete',
				'fn': function(event, button, self) {
					self.wait();
					var url = self.generateUrl('delete', button.id);
					self.sendRequest(url, null, function(){
						button.parentNode.parentNode.removeChild(button.parentNode);
						self.ready();
						self.success('Deleted exam.');
					});
				}
			}
		},
		'listeners': [
			{
				'selector': 'form',
				'event': 'submit', // defaults to click
				'fn': function(event, object, self) {
					self.wait();
					event.preventDefault();
					self.postForm(null, object, function(ajax) {
						var data = JSON.parse(ajax.responseText);
						if (data.success) {
							self._addRow(JSON.parse(ajax.responseText).data[0]);
							object.reset();
							self.ready();
							self.success('Exam created.');
						} else {
							self.ready();
							self.failure(data.message);
						}
					});
				}
			}
		],
		'columns': {
			'title': null,
			'section': function(value) {
				return value.toUpperCase();
			},
			'tDate': function(value) {
				return (new Date(value)).toLocaleDateString();
			},
			'tStart': function(value) {
				return (new Date(value)).toLocaleTimeString();
			},
			'questions': null
		},
		'loader': document.querySelector('div.notification')
	}); </script>
{% endblock %}

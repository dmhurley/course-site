{% extends 'BioExamBundle:Public:main.html.twig' %}

{% block content %}
		<p>Your answers have been submitted for grading. Stay on this page to be assigned a practice test to grade. Press the grade button once it appears to begin grading a peer's test, you must grade a total of {{global.grade}} tests in {{exam.gDuration}} minutes or by {{exam.gEnd|date('h:i a')}} to finish. Give each response a numeric score, with 0 being the lowest score possible, base your grade off the rubric given below their answer. You will not get any points if you do not grade {{global.grade}} test(s).</p>

		<div id="submit">
			<form id="button" method="POST" action="" style="display:none">
				<button>Grade</button>
			</form>
			<div id="loadMessage">
				Finding test to grade<br />This could take several minutes
				{% image 'bundles/bioexam/images/ajax-loader.gif' output='images/*.png' %}
					<div id="loader" style="background-image:url('{{asset_url}}')"></div>
				{% endimage %}
			</div>
		</div>
		{% if taker.gradedNum > 0 %}
			{% include 'BioExamBundle:Exam:timer.html.twig' with {'duration':exam.gDuration, 'end':date(exam.gDate|date('Y-m-d ') ~ exam.gEnd|date('H:i:s'))|date('U'), 'start':taker.timecard['submitted']|date('U')} only %}
		{% endif %}
{% endblock %}

{% block java %}
	<script>
	function Checker(endtime) {
		this.endtime = new Date(new Date().getTime() + 5*60000);
		this.interval = null;

		this.check = function(force) {
			var ajax = new XMLHttpRequest();
			ajax.open('POST', '{{ url("check") }}'+(force?'?please':''), true);
			ajax.setRequestHeader("Content-type","application/x-www-form-urlencoded");
			self = this;
			ajax.onload = function() {
				var response = JSON.parse(this.responseText);
				if (!response.success) {

				} else {
					clearInterval(self.interval);
					document.getElementById('loadMessage').style.display="none";
					document.getElementById('button').style.display = "block";
				}
			};
			ajax.send("a={{taker.id}}");
		}

		setTimeout((function(self) {
			return function() {
				self.check(false);
				self.interval = setInterval(function() {
					self.check(self.endtime < new Date());
				}, 60000);
			}
		})(this), Math.random()*10000);
	}
	checker = new Checker({{taker.timecard['submitted']|date('U')}});
	</script>
{% endblock %}

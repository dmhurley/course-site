{% extends 'BioExamBundle:Public:main.html.twig' %}

{% block content %}	
	<p>{{global.rules}}</p>

	{% if messages|length > 0 %}
		<ul>
			{% for message in messages %}
				<li>{{message}}</li>
			{% endfor %}
		</ul>
	{% endif %}

	{% if exam != null %}
		<br />
		<hr />
		<br />

		<p id="java" style="display:none;">You can begin {{exam.title}} <b><span id="time"></span></b>.</p>

		<p>Once you begin you will have {{exam.tDuration}} minutes or until {{exam.tEnd|date('h:i a')}} to complete it. Grading will begin 
		{% if date(exam.tDate|date('Y-m-d')~' '~exam.tStart|date('H:i:s')) >= date(exam.gDate|date('Y-m-d')~' '~exam.gStart|date('H:i:s')) %}
			after you finish the test
		{% else %}
			{{exam.gDate|date('m/d')}} at {{exam.gStart|date('h:i a')}}
		{% endif %} 
		and lasts for {{exam.gDuration}} minutes or until {{exam.gEnd|date('h:i a')}}.</p>

	<p id="no-java" style="font-weight:bold">It appears you have javascript disabled or there has been an error. The start button will not work until {{exam.tStart|date('h:i a')}} on {{exam.tDate|date('m/d')}}.</p>
	<div id="hidden">
		{{ form(form) }}
	</div>
	{% endif %}
	<br />
	<hr />

	<h1>Review Old Tests</h1>
	<p>Look at your responses, scores, and the actual answers for all past tests. If you have just taken an exam, results will be unavailable until 12 hours after the grading period has ended.</p>

	<ul>
		{% for exam in exams if date(exam['gdate']|date('Y-m-d')~' '~exam['gend']|date('H:i:s')) < date() or exam['taker']|default({}).status|default(0) == 5 %}	
			{% spaceless %}
			<li>
			{% set viewAble = date(exam['gdate']|date('Y-m-d')~' '~exam['gend']|date('H:i:s')) < date('-12 hours') %}

			{% if viewAble %}
				<a href="{{path('review_exam', {'id':exam['id']}) }}">{{exam['title']}}</a> - 
			{% else %}
				{{exam['title']}} - 
			{% endif %}

				
				{% if exam['taker'] is null or exam['taker'].status == 1 %}
					not taken
				{% elseif exam['taker'].status < 3 %}
					not finished
				{% elseif exam['taker'].status >= 3 and not viewAble %}
					pending
				{% elseif exam['taker'].gradedBy|length == 0 %}
					ungraded
				{% else %}
					{% set outOf = 0 %}
					{% set totalMean = 0 %}

					{% for question in exam['taker'].exam.questions %}
						{% set outOf = outOf + question.points %}
					{% endfor %}

					<!-- find points earned -->
					{% for answer in exam['taker'].answers %}
						{% set questionTotal = 0 %}
						{% set grades = 0 %}

						{% for grade in answer.grades if grade.points is not null %}
							{% set grades = grades + 1 %}
							{% set questionTotal = questionTotal+grade.points %}
						{% endfor %}

						{% if grades != 0 %}
							{% set totalMean = totalMean + questionTotal/grades %}
						{% endif %}
					{% endfor %}

					{{totalMean|number_format(2, '.', ',')}}/{{outOf|number_format(2)}}
				{% endif %}
			</li>
			{% endspaceless %}
		{% endfor %}
	</ul>
{% endblock %}

{% block java %}
	{% if exam != null %}
		<script>
		(function() {
			function Pinger(time) {
				this.date = new Date(time*1000);
				this.updatePage = function() {
						var now = new Date();
						var diff = this.date.valueOf() - now.valueOf();
						document.getElementById('time').innerHTML = msToText(diff);
						if (diff < 0) {
							console.log('test');
							clearInterval(this.interval);
							document.getElementById('hidden').style.display="block";
						}
					}

				// start interval then call once immediately.
				this.interval = setInterval(
					(function(self) {
						return function() {
							try {
								self.updatePage();
							} catch(e) {
								handleError();
							}
						}
					})(this), 10000);
				this.updatePage();
			}

			function msToText(ms) {
				if (ms <= 0) {
					return "now";
				} else if (ms < 1000 * 60) {
					return 'in less than 1 minute';
				}

				var hours = ms/1000/60/60;
				ms = ms%(1000*60*60);
				var minutes = ms/1000/60;

				var string = "in approximately ";
				if (Math.floor(hours) > 1) {
					string+=Math.floor(hours) + " hours, and ";
				} else if (Math.floor(hours) === 1) {
					string+="1 hour, and ";
				}

				if (Math.floor(minutes) !== 1) {
					string+=Math.floor(minutes) + " minutes";
				} else {
					string+="1 minute";
				}

				return string;
			}

			function handleError() {
				console.log('error');
				document.getElementById('hidden').style.display='block';
				document.getElementById('no-java').style.display='block';
				document.getElementById('java').style.display = 'none';
			}

			window.addEventListener('error', handleError);

			window.addEventListener('load', function() {
				document.getElementById('hidden').style.display = 'none';
				document.getElementById('no-java').style.display = 'none';
				document.getElementById('java').style.display = 'block';
				new Pinger("{{ date(exam.tDate|date('Y-m-d ')~exam.tStart|date('H:i:s'))|date('U') }}");
			});
		})()
		</script>
	{% endif %}
{% endblock %}

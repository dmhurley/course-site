{% extends 'BioExamBundle:Public:main.html.twig' %}

{% block content %}
		<p>Your answers have been submitted for grading. Stay on this page to be assigned a practice test to grade. Press the grade button once it appears to begin grading a peer's test, you must grade a total of {{global.grade}} tests in {{exam.gDuration}} minutes or by {{exam.gEnd|date('h:i a')}} to finish. Give each response a numeric score, with 0 being the lowest score possible, base your grade off the rubric given. You will not get any points if you do not grade {{global.grade}} test(s). This page checks to see if there is an available test every 30 seconds, so make sure to leave this page open and please be patient.</p>

		<p>You must grade {{global.grade - taker.gradedNum + taker.assigned|length }} more test(s) before you are done.</p>

		<div id="no-java">
			<p style="font-weight:bold;">It appears that you have javascript disabled or there has been an error. Click the Grade button every few minutes to check for an open test to grade.</p>
		</div>
		<div id="submit">
			<form id="button" method="POST" action="">
				<button>Grade</button>
			</form>
			<div id="loadMessage" style="display:none">
				Finding test to grade<br />This could take several minutes
				{% image 'bundles/bioexam/images/ajax-loader.gif' output='images/*.png' %}
					<div id="loader" style="background-image:url('{{asset_url}}')"></div>
				{% endimage %}
			</div>
		</div>
		{% if taker.gradedNum > 0 %}
			{% include 'BioExamBundle:Public:timer.html.twig' with {
				'late': taker.getTimestamp('grading')[0]['time']|date('U') + taker.exam.gDuration * 60 - date()|date('U'),
				'end': date(taker.exam.gEnd)|date('U') - date()|date('U'),
				'endTime':taker.exam.gEnd
			} only %}
		{% endif %}
{% endblock %}

{% block java %}
	<script>
	(function() {
		function Checker(endtime) {
			this.endtime = new Date(new Date().getTime() + 5*60000);
			this.interval = null;

			this.check = function(force) {
				var ajax = new XMLHttpRequest();
				ajax.open('POST', '{{ url("check", {'id' : taker.id}) }}'+(force?'?please':''), true);
				ajax.setRequestHeader("Content-type","application/x-www-form-urlencoded");
				self = this;
				ajax.onload = function() {
					var response = JSON.parse(this.responseText);
					if (!response.success) {

					} else {
						clearInterval(self.interval);
						document.getElementById('loadMessage').style.display="none";
						document.getElementById('button').style.display = "block";
					}
				};
				ajax.send();
			}

			setTimeout((function(self) {
				return function() {
					try {
						self.check(false);
						self.interval = setInterval(function() {
							try {
								self.check(self.endtime < new Date());
							} catch(e) {
								handleError();
							}
						}, 30000);
					} catch (e) {
						handleError();
					}
				}
			})(this), Math.random()*15000);
		}

		function handleError() {
			document.getElementById('loadMessage').style.display='none';
			document.getElementById('no-java').style.display = 'block';
			document.getElementById('button').style.display = 'block';
		}

		window.addEventListener('error', handleError)

		window.addEventListener('load', function() {
			new Checker({{taker.getTimestamp('submitted')[0]['time']|date('U')}});
			document.getElementById('loadMessage').style.display='block';
			document.getElementById('no-java').style.display = 'none';
			document.getElementById('button').style.display = 'none';
		});
	})();
	</script>
{% endblock %}

{% extends 'BioPublicBundle:Template:rowForm.html.twig' %}

{% block content %}
		
		<div id="buttons">
			<a class="lonely link add">add student</a>
			<a class="lonely link find">find students</a>
		</div>
		<table>
			<thead>
				<tr>
					<th>ID</th>
					<th>Name</th>
					<th>Section</th>
					<th>Email</th>
					<th>Edit</th>
					<th>Reset</th>
					<th>Delete</th>
				</tr>
			</thead>
			<tbody>

			</tbody>
			<tfoot>
				<tr>
					<td colspan=7>
						<table>
							<tr>
								<td class="lonely link add" >add student</td>
								<td class="lonely link find" > find students</td>
							</tr>
						</table>
					</td>
				</tr>
			</tfoot>
		</table>
{% endblock %}

{% block java %}
	<script>
		loader = new Loader({
			'url': '{{ url('main_page')}}crud/',
			'bundle': 'student',
			'entity': 'student',
			'container' : {
				'sortFn': function(ob1, ob2) {
					return ob1.data.f_name < ob2.data.f_name;
				}
			},
			'buttons': {
				'reset': function(event, self) {
					// reset some shit
				}
			},
			'columns': {
				'sid': null,
				'f_name': null,
				'l_name': function(value, cell) {
					cell.previousSibling.innerHTML += ' '+ value;
					return undefined;
				},
				'section': function(value, cell) {
					return value.name.toUpperCase();
				},
				'email': function(value, cell) {
					if (value) {
						return '<a href="'+value+'">'+value+'</a>';
					} else {
						return '-';
					}
				}
			},
			'listeners': [
				{
					'selector': '.link.add',
					'fn': function(event, object, self) {
						self.forms.open('add');
					}
				},
				{
					'selector': '.link.find',
					'fn': function(event, object, self) {
						self.forms.open('find');
					}
				},
				{
					'selector': '.form_layer, .form_exit',
					'fn': function(event, object, self) {
						if (event.target === object)
						self.forms.close();
					}
				},
				{
					'selector': null,
					'event': 'init',
					'fn': function(event, object, self) {
						console.log("Retrieving existing rows...");
						self.sendRequest(self.generateUrl('all') , null, function(event, self) {
							if (this.success) {
								self.settings.container.createChildren(this.data, self);
								self.notify.ready();
							} else {
								self.notify.failure(this.message + " Please refresh.");
							}
						});
					}
				}
			],
			'form': {
				'settings': {
					'find': {
						'before': function(container, self) {
							this.action = self.generateUrl('find');

							var required = this.querySelectorAll('[required]');
							for(var i = 0, req = null; req = required[i]; i++) {
								req.removeAttribute('required');
								req.setAttribute('data-required');
							}
						},
						'onsubmit': function(event, container, self) {
							event.preventDefault();
							self.notify.wait();
							container.classList.remove('shown');
							self.postForm(null, this, function(event, self) {
								if (this.success) {
									self.settings.container.element.innerHTML = '';
									self.settings.container.createChildren(this.data, self);
									self.notify.success('Found ' + this.data.length + ' students.');
									self.forms.close();
								} else {
									self.notify.failure(this.message);
									container.classList.add('shown');
								}
							});
						},
						'after': function(container, self) {
							var required = this.querySelectorAll('[data-required]');
							for(var i = 0, req = null; req = required[i]; i++) {
								req.setAttribute('required', 'required');
								req.removeAttribute('data-required');
							}
						}
					},
					'add': {
						'before': function(container, self) {
							this.action = self.generateUrl('create_user');
						}
					}
				}
			}
		});
	</script>
{% endblock %}
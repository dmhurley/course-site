{% extends 'BioPublicBundle:template:rowForm.html.twig' %}

{% block head %}
	{{ parent() }}
		{% stylesheets 'bundles/biopublic/css/instruction.css' filter="cssrewrite" output="css/*.css" %}
			<link rel="stylesheet" href="{{ asset_url }}" />
		{% endstylesheets %}

{% endblock %}

{% block content %}
<table>
	<thead>
		<tr>
			<th>Username</th>
			<th>Role</th>
			<th>Promote</th>
			<th>Demote</th>
			<th>Reset</th>
			<th>Delete</th>
		</tr>
	</thead>

	<tbody>

	</tbody>

	<tfoot>
		<tr><td colspan=6 class="link add lonely">create account</td></tr>
	</tfoot>
</table>

<div>
	{% image 'bundles/biouser/images/login.png' output='images/*.png' %}
		<img src="{{ asset_url }}"/>
	{% endimage %}
	<h2>Instructions</h2>
	<p>A user can have one of three different roles. If a user has the role <i>USER</i> they cannot access anything that is not already publicly available. A user with the role <i>ADMIN</i> has the power to edit everything on the course website <b>except</b> for this page. Finally anyone with the role <i>SUPER ADMIN</i> can edit everything on the site and promote, demote, or delete any user. To see what role you have, hover over your username in the top right corner and look for the <i>Role</i> row.</p>
</div>

<div class="tableStyle">
	<p>If you want to give other instructors or TAs access to the admin portion of the site. They must first register an account and be promoted from this page. It's not recommended to promote anyone but yourself to the role of <i>SUPER ADMIN</i>.</p>

	<p>Users of role <i>Admin</i> and above can masquerade as students to take exams, sign up for field trips, register clickers, and more. Information specific to students like first and last name, section, and student ID are spoofed. The spoofed values are generated as follows:</p>
	<table>
		<tr>
			<td>First Name</td>
			<td>The username you sign in as</td>
		</tr>
		<tr>
			<td>Last Name</td>
			<td>Always 'Admin'</td>
		</tr>
		<tr>
			<td>Section</td>
			<td>Always 'A9'</td>
		</tr>
		<tr>
			<td>Student ID</td>
			<td>Many 0's followed by a few numbers<br />
			eg: '0000013'</td>
		</tr>
	</table>
</div>
{% endblock %}

{% block java %}
	<script>
		loader = new Loader({
			'url': '{{ url('main_page') }}crud/',
			'bundle': 'user',
			'entity': 'user',
			'container': {
				'sortFn': function(ob1, ob2) {
					var roles = ['ROLE_USER', 'ROLE_STUDENT', 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN', 'ROLE_SETUP'];
					if (roles.indexOf(ob1.data.roles[0]) === roles.indexOf(ob2.data.roles[0])) {
						return ob1.data.username < ob2.data.username;
					} else {
						return roles.indexOf(ob1.data.roles[0]) > roles.indexOf(ob2.data.roles[0]);
					}
				}
			},
			'buttons': {
				'edit': undefined,
				'promote': {
					'fn': function(event, self) {
						self.notify.wait();
						var url = self.generateUrl('promote', this.parent.data.id, {
							'address': "{{ url('view_users') }}",
							'entity': null,
							'bundle': null,
						});
						var ob = this;
						self.sendRequest(url, null, function(event, self) {
							if (this.success) {

								self.settings.container.createChildren(this.data, self);
								ob.parent.removeSelf();

								self.notify.success('Promoted user.');
							} else {
								self.notify.failure(this.message);
							}
						});
					}
				},
				'demote': {
					'fn': function(event, self) {
						self.notify.wait();
						var url = self.generateUrl('demote', this.parent.data.id, {
							'address': "{{ url('view_users') }}",
							'entity': null,
							'bundle': null,
						});
						var ob = this;
						self.sendRequest(url, null, function(event, self) {
							if (this.success) {

								self.settings.container.createChildren(this.data, self);
								ob.parent.removeSelf();

								self.notify.success('Demoted user.');
							} else {
								self.notify.failure(this.message);
							}
						});
					}
				},
				'reset': {
					'fn': function(event, self) {
						self.notify.wait();
						var url = self.generateUrl('reset', this.parent.data.id, {
							'address': "{{ url('view_users') }}",
							'entity': null,
							'bundle': null,
						});
						self.sendRequest(url, null, function(event, self) {
							if (this.success) {
								self.notify.success('Password reset.');
							} else {
								self.notify.failure(this.message);
							}
						});
					}
				}
			},
			'columns': {
				'username': null,
				'roles': function(value, cell) {
					return value[0].replace(/_/g, ' ').toLowerCase().slice(5);
				}
			}
		});
	</script>
{% endblock %}

{% extends 'BioPublicBundle::main.html.twig' %}

{% block head %}
	{{ parent() }}

	{% stylesheets 'bundles/biofolder/css/folder2.css' filter="cssrewrite" output="css/*.css" %}
		<link rel="stylesheet" href="{{ asset_url }}" />
	{% endstylesheets %}

	{% javascripts 'bundles/bioexam/js/Loader.js'
				   'bundles/bioexam/js/Parser.js'
				   'bundles/bioexam/js/Notify.js'
				   'bundles/bioexam/js/Lister.js' %}
		<script src="{{asset_url}}"></script>
	{% endjavascripts %}
{% endblock %}

{% block content %}
	<div class="form_layer">
		<div class="form_container">
			<div class="form_scroller">
				{{ form_start(folderForm) }}
					<div id="form">
						{{form_row(folderForm.name)}}
							<div class="folder">
								{{form_row(folderForm.private)}}
							</div>
							<div class="file">
								{{form_row(fileForm.file)}}
							</div>
							<div class="link">
								{{form_row(linkForm.address)}}
							</div>
							<div style="display:none;">
								{{ form_row(folderForm.parent) }}
							</div>
						{{form_row(folderForm.submit)}}
					</div>
				{{ form_end(folderForm) }}
			</div>
			<div class="form_exit"></div>
		</div>
	</div>

	<div id="box">
		<div class="header" >

		</div>
		<div class="content">
			
		</div>
		<div class="footer">
			<button class="add_thing" type="submit" data-action="folder">Add Folder</button>
			<button class="add_thing" type="submit" data-action="file">Add File</button>
			<button class="add_thing" type="submit" data-action="link">Add Link</button>
			<button class="" type="submit" data-action="delete">Delete</button>
			<button class="" type="submit" data-action="edit">Edit</button>
		</div>
	</div>
{% endblock %}

{% block java %}
	<script>
	var loader = new Loader({
		'url': '{{ url('main_page')}}crud/',
		'bundle': 'folder',
		'entity': 'fileBase',
		'table' : undefined,
		'buttons': undefined,
		'browser': {
			'container': document.querySelector('#box .content'),
			'depth': 0,
			'selected': null,
			'listers': [],
			'addColumn': function(files, self) {
				var browser = self.settings.browser;
				var column;
				browser.depth++;
				if (browser.container.children.length < browser.depth) {
					column = document.createElement('div');
					column.classList.add('column');
					column.setAttribute('data-depth', browser.depth);

					column.addEventListener('click', function(event) {
						if (this != event.target) {
							browser.depth = this.getAttribute('data-depth');
							for(var i = browser.depth; i < browser.container.children.length;) {
								browser.container.removeChild(browser.container.children[i]);
							}
						}
					});
					browser.container.appendChild(column);
				} else {
					column = browser.container.children[browser.depth];
				}

				browser.listers[browser.depth - 1] = new Lister(column, function(ob1, ob2) {
					return parseInt(ob1.getAttribute('data-id')) > parseInt(ob2.getAttribute('data-id'));
				});

				for(var i = 0, folder = null; folder = files[i]; i++) {					
					browser.listers[browser.depth - 1].add(this.createObject(folder, self, browser));
				}
			},
			'createObject': function(folder, self, browser) {
				var row = document.createElement('div');
				row.classList.add('row');
				row.classList.add(folder.type);
				row.setAttribute('data-id', folder.id);

				if(folder.type === 'link') {
					row.innerHTML = '<a href="'+folder.address+'" target=_blank>'+folder.name+"</a>";
				} else if (folder.type === 'file') {
					row.innerHTML = '<a href="' + self.parser.parse( '{{ url('download', {'id': ('zzzz')})|replace({'zzzz': '#{id}'}) }}', folder)+'" target=_blank>'+folder.name+'</a>';
				} else {
					row.innerHTML = folder.name;
					row.addEventListener('click', function(event) {
						self.notify.wait();
							self.settings.browser.selected = this.getAttribute('data-id');

							var _oldEntity = self.settings.entity;
							self.settings.entity = 'folder';
							var url = self.generateUrl('get', this.getAttribute('data-id'));
							self.settings.entity = _oldEntity;

							self.sendRequest(url, null, function(event, self) {
							if (this.success) {
								browser.addColumn(this.data[0].children, self);
								self.notify.ready();
							} else {
								self.notify.failure(this.message);
							}
						})
					});
				}
				row.addEventListener('click', function(event) {
					var selected = this.parentNode.querySelector('.selected');
					if (selected) selected.classList.remove('selected');
					var globalSelected = document.querySelectorAll('.row.selected');
					for (var j = 0; j < globalSelected.length; j++) {
						globalSelected[j].classList.add('old');
					}
					this.classList.remove('old');
					this.classList.add('selected');
				});
				if (folder.type === 'link' || folder.type === 'file') {
					row.addEventListener('click', function(event) {
						self.settings.browser.selected = null;
					});
				}

				return row;
			},
			'select': function(value) {
				value = value || this.selected;
				var select = document.querySelector('#form_parent');
				select.value = value;
				if (select.value !== value) {
					var option = document.createElement('option');
					option.name = option.value = value;
					select.appendChild(option);
				}
				select.value = value;
			}
		},
		'listeners': [
			{
				'selector': 'body',
				'event': 'loader-init',
				'fn': function(event, object, self) {
					self.sendRequest(self.generateUrl('find'), 'parent=', function(event, self) {
						if (this.success) {
							self.settings.browser.addColumn(this.data, self);
							self.notify.ready();
						} else {
							self.notify.failure(this.message);
						}
					});			
				}
			},
			{
				'selector': '.form_layer, .form_exit',
				'fn': function(event, object, self) {
					if (event.target === object)
					self.forms.close();
				}
			},
			{
				'selector': '.add_thing',
				'fn': function(event, object, self) {
					if (self.settings.browser.selected === null) {
						self.notify.failure('You must select a folder.');
					} else {
						var entity = object.getAttribute('data-action');
						self.forms.data.form._entity = entity;
						self.forms.data.form._selector = entity==='folder'?'.link, .file':entity==='link'?'.folder, .file':'.link, .folder';
						self.forms.open('add');
					}
				}
			},
			{
				'selector': 'button[data-action=delete]',
				'fn': function(event, object, self) {
					var selected = document.querySelector('.selected:not(.old)');
					if (!selected) {
						self.notify.failure('You must select something.');
					} else {
						console.log(selected);
						self.sendRequest(self.generateUrl('delete', selected.getAttribute('data-id')), null, function(event, self) {
							if (this.success) {
								self.settings.browser.listers[self.settings.browser.depth - 2].remove(selected);
							} else {
								self.notify.failure(this.message);
							}
						});
					}
				}
			}
		],
		'form': {
			'settings': {
				'add': {
					'before': function(container, self) {
						var newEntity = this._entity;
						var toHide = this._selector;

						var entity = self.settings.entity;
						self.settings.entity = newEntity;
						this.action = self.generateUrl('create');
						self.settings.entity = entity;

						var others = this.querySelectorAll(toHide);
						for (var i = 0, other = null; other = others[i]; i++) {
							other.style.display = 'none';
							inputs = other.querySelectorAll('input, textarea, select');
							for (var j = 0, input = null; input = inputs[j]; j++) {
								input.disabled = 'disabled';
							}
						}

						self.settings.browser.select();
					},
					'onsubmit': function(event, container, self, type) {
						var entity = this._entity;
						event.preventDefault();
						self.notify.wait();
						container.classList.remove('shown');

						self.postForm(null, this, function(event, self) {
							if (this.success) {
								// add folder or reload parent
								self.notify.success(entity+' added.');
								self.settings.browser.listers[self.settings.browser.depth - 1].add(self.settings.browser.createObject(this.data[0], self, self.settings.browser));
								self.forms.close();
							} else {
								self.notify.failure(this.message);
								container.classList.add('shown');
							}
						});
					},
					'after': function(container, self) {
						var toShow = this._selector;
						this.action="";

						var others = this.querySelectorAll(toShow?toShow:'.link, .file');
						for (var i = 0, other = null; other = others[i]; i++) {
							other.style.display = 'block';
							inputs = other.querySelectorAll('input, textarea, select');
							for (var j = 0, input = null; input = inputs[j]; j++) {
								input.disabled = false;
							}
						}
					}
				},
				'edit': {
					'before': function(form, container, self) {

					},
					'onsubmit': function(event, form, container, self) {

					},
					'after': function(form, container, self) {

					}
				}
			}
		}
	});
	</script>
{% endblock %}

{% extends 'BioPublicBundle::main.html.twig' %}

{% block head %}
	{{ parent() }}

	{% stylesheets 'bundles/biofolder/css/folder2.css' filter="cssrewrite" output="css/*.css" %}
		<link rel="stylesheet" href="{{ asset_url }}" />
	{% endstylesheets %}

	{% javascripts 'bundles/bioexam/js/Loader.js'
				   'bundles/bioexam/js/Parser.js'
				   'bundles/bioexam/js/Notify.js'
				   'bundles/bioexam/js/Lister.js' %}
		<script src="{{asset_url}}"></script>
	{% endjavascripts %}
{% endblock %}

{% block content %}
	<div class="form_layer">
		<div class="form_container">
			<div class="form_scroller">
				{{ form_start(folderForm) }}
					<div id="form">
						{{form_row(folderForm.name)}}
							<div class="folder">
								{{form_row(folderForm.private)}}
							</div>
							<div class="file">
								{{form_row(fileForm.file)}}
							</div>
							<div class="link">
								{{form_row(linkForm.address)}}
							</div>
							<div style="display:none;">
								{{ form_row(folderForm.parent) }}
							</div>
						{{form_row(folderForm.submit)}}
					</div>
				{{ form_end(folderForm) }}
			</div>
			<div class="form_exit"></div>
		</div>
	</div>

	<div id="box">
		<div class="content">

		</div>
		<div class="header" >
			<div class="footer">
			<button class="add_thing" type="submit" data-action="folder">Add Folder</button>
			<button class="add_thing" type="submit" data-action="file">Add File</button>
			<button class="add_thing" type="submit" data-action="link">Add Link</button>
			<button class="" type="submit" data-action="delete">Delete</button>
			<button class="" type="submit" data-action="edit">Edit</button>
		</div>
	</div>
{% endblock %}

{% block java %}
	<script>
	(function() {
		columnLoaders = [];

		var createColumn = function(datas) {
			var column = document.createElement('table');
			column.classList.add('column');

			var body = document.createElement('tbody');
			column.appendChild(body);

			var loader = new Loader({
				'url': '{{ url('main_page')}}crud/',
				'bundle': 'folder',
				'entity': 'fileBase',
				'listen': true,
				'table' : {
					'element': column,
					'createFn': function(data){
						var row = document.createElement('tr');
						var self = this;
						row.data = data;
						row.classList.add('row');
						row.classList.add(data.type);

						row.delete = function() {
							unSelect(this);
							self.lister.remove(this);
						}

						if(data.type === 'link') {
			 				row.innerHTML = '<td><a href="'+data.address+'" target=_blank>'+data.name+"</a></td>";
			 			} else if (data.type === 'file') {
			 				row.innerHTML = '<td><a href="' + self.parser.parse( '{{ url('download', {'id': ('zzzz')})|replace({'zzzz': '#{id}'}) }}', data)+'" target=_blank>'+data.name+'</a></td>';
			 			} else {
			 				row.innerHTML = '<td>'+data.name+'</td>';
			 				row.addEventListener('click', function(event) {
			 					self.notify.wait();
			 						var _oldEntity = self.settings.entity;
			 						self.settings.entity = 'folder';
			 						var url = self.generateUrl('get', data.id);
			 						self.settings.entity = _oldEntity;

			 						self.sendRequest(url, null, function(event, self) {
			 						if (this.success) {
			 							createColumn(this.data[0].children);
			 							self.notify.ready();
			 						} else {
			 							self.notify.failure(this.message);
			 						}
			 					})
			 				});
			 			}

						row.addEventListener('click', function(event) {
							var selected = this.parentNode.querySelector('.selected');
							if (selected) {
								selected.classList.remove('selected');
							}
							var globalSelected = document.querySelectorAll('.row.selected');
							for (var i = 0; i < globalSelected.length; i++) {
								globalSelected[i].classList.add('old');
							}
							this.classList.remove('old');
							this.classList.add('selected');
						});

						return row;
					},
					'sortFn': function(ob1, ob2) {
						if (ob1.data.order === ob2.data.order) {
							return ob1.data.name < ob2.data.name;
						} else {
							return parseInt(ob1.data.order) < parseInt(ob2.data.order);
						}
					}
				},
				'buttons': undefined,
				'listeners': []
			});

			column.addEventListener('click', function(event) {
				if (this != event.target) {
					var container = document.querySelector('#box .content');
					var element;
					while ((element = container.children[container.children.length - 1]) !== this) {
						container.removeChild(element);
						columnLoaders.splice(columnLoaders.length - 1, 1)
					}
				}
			});

			column.add = function(data) {
				loader.lister.add(loader.createObject(data));
			}
			column.replace = function(data) {
				loader.lister.replace(loader.createObject(data));
			}

			columnLoaders[columnLoaders.length] = loader;

			for(var i = 0, data = null; data = datas[i]; i++) {
				loader.lister.add(loader.createObject(data));
			}

			document.querySelector('#box .content').appendChild(column);
		}

		var getSelected = function() {
			var all = document.querySelectorAll('.selected');
			var last = all[all.length - 1];
			if (last.classList.contains('old')) {
				return false;
			} else {
				return last;
			}
		}

		var unSelect = function() {
			var selected = getSelected();
			if (selected) {
				selected.classList.remove('selected');
				selected.classList.remove('old');
				if (selected.nextSibling) {
					selected.nextSibling.classList.add('selected');
				} else if (selected.previousSibling) {
					selected.previousSibling.classList.add('selected');
				} else {
					var old = document.querySelectorAll('.selected.old');
					if (old.length > 0) {
						old[old.length - 1].classList.remove('old');
						var container = document.querySelector('#box .content');
						var element;

						while ((element = container.children[container.children.length - 1]) !== old[old.length - 1].parentNode.parentNode) {
							container.removeChild(element);
							columnLoaders.splice(columnLoaders.length - 1, 1)
						}
					}
				}
				
			}
		}

		var setForm = function(selected) {
			var others = document.querySelectorAll('form .link, form .folder, form .file');
			for (var i = 0, other = null; other = others[i]; i++) {

				if (other.classList.contains(selected.data.type)) {
					other.style.display = 'block';
				} else {
					other.style.display = 'none';
				}
				inputs = other.querySelectorAll('input, textarea, select');
				for (var j = 0, input = null; input = inputs[j]; j++) {
					if (other.classList.contains(selected.data.type)) {
						input.disabled = false;
					} else {
						input.disabled = 'disabled';
					}
				}
			}

			var select = document.querySelector('#form_parent');
			select.value = selected.data.id;
			if (select.value !== selected.data.id) {
				var option = document.createElement('option');
				option.name = option.value = selected.data.id;
				select.appendChild(option);
			}
			select.value = selected.data.id;
		}

		mainLoader = new Loader({
			'url': '{{ url('main_page')}}crud/',
			'bundle': 'folder',
			'entity': 'fileBase',
			'table' : undefined,
			'buttons': undefined,
			'listen': true,
			'listeners': [
				{
					'selector': 'body',
					'event': 'loader-init',
					'fn': function(event, object, self) {
						if (self.settings.listen) {
							self.sendRequest(self.generateUrl('find'), 'parent=', function(event, self) {
								if (this.success) {
									createColumn(this.data);
									self.notify.ready();
								} else {
									self.notify.failure(this.message);
								}
							});
							self.settings.listen = false;			
						}
					}
				},
				{
				'selector': '.form_layer, .form_exit',
					'fn': function(event, object, self) {
						if (event.target === object)
						self.forms.close();
					}
				},
				{
					'selector': 'button.add_thing',
					'fn': function(event, object, self) {
						var selected = getSelected();
						if (!selected || selected.data.type !== 'folder') {
							self.notify.failure('You must select a folder.');
						} else {
							self.forms.data.form._selected = selected;
							self.forms.open('add');
						}
					}
				},
				{
					'selector': 'button[data-action=delete]',
					'fn': function(event, object, self) {
						self.notify.wait();
						var selected = getSelected();
						if (!selected) {

						} else {
							self.sendRequest(self.generateUrl('delete', selected.data.id), null, function(event, self) {
								if (this.success) {
									self.notify.success('Deleted ' + selected.data.type + '.');
									selected.delete();
								} else {
									self.notify.failure(this.message);
								}
							});
						}
					}
				}

			],
			'form': {
				'settings': {
					'add': {
						'before': function(container, self) {
							var oldEntity = self.settings.entity;
								self.settings.entity = this._selected.data.type;
								this.action = self.generateUrl('create');
							self.settings.entity = oldEntity;
							setForm(this._selected);
						},
						'onsubmit': function(event, container, self) {
							event.preventDefault();
							self.notify.wait(0);
							container.classList.remove('shown');
							var form = this;

							self.postForm(null, this, function(event, self) {
								if (this.success) {
									self.notify.success('Added '+form._selected.data.type+'.');
									a = form;
									form._selected.parentNode.parentNode.nextSibling.add(this.data[0]);
									self.forms.close();
								} else {
									self.notify.failure(this.message);
									container.classList.add('shown');
								}
							})
						},
						'after': function(container, self) {
							this.action = '';
						}
					}
				}
			}
		})



	})()

		</script>
{% endblock %}

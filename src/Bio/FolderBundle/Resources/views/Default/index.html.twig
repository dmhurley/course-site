{% extends 'BioPublicBundle::main.html.twig' %}

{% block head %}
	{{ parent() }}

	{% stylesheets 'bundles/biofolder/css/folder2.css' filter="cssrewrite" output="css/*.css" %}
		<link rel="stylesheet" href="{{ asset_url }}" />
	{% endstylesheets %}

	{% javascripts 'bundles/bioexam/js/Loader.js'
				   'bundles/bioexam/js/Parser.js' %}
		<script src="{{asset_url}}"></script>
	{% endjavascripts %}
{% endblock %}

{% block content %}
	<div class="form_layer">
		<div class="form_container">
			<div class="form_scroller">
				{{ form_start(folderForm) }}
					<div id="form">
						{{form_row(folderForm.name)}}
							<div class="folder">
								{{form_row(folderForm.private)}}
							</div>
							<div class="file">
								{{form_row(fileForm.file)}}
							</div>
							<div class="link">
								{{form_row(linkForm.address)}}
							</div>
							<div style="display:none;">
								{{ form_row(folderForm.parent) }}
							</div>
						{{form_row(folderForm.submit)}}
					</div>
				{{ form_end(folderForm) }}
			</div>
			<div class="form_exit"></div>
		</div>
	</div>

	<div id="box">
		<div class="header" >

		</div>
		<div class="content">
			
		</div>
		<div class="footer">
			<button class="add_thing" type="submit" data-action="folder">Add Folder</button>
			<button class="add_thing" type="submit" data-action="file">Add File</button>
			<button class="add_thing" type="submit" data-action="link">Add Link</button>
			<button class="" type="submit" data-action="folder">Delete</button>
			<button class="" type="submit" data-action="file">Edit</button>
		</div>
	</div>
{% endblock %}

{% block java %}
	<script>
	var loader = new Loader({
		'url': '{{ url('main_page')}}crud/',
		'bundle': 'folder',
		'entity': 'fileBase',
		'table' : undefined,
		'buttons': undefined,
		'browser': {
			'container': document.querySelector('#box .content'),
			'depth': 0,
			'selected': null,
			'addColumn': function(files, self) {
				var browser = self.settings.browser;
				var column;
				browser.depth++;
				if (browser.container.children.length < browser.depth) {
					column = document.createElement('div');
					column.classList.add('column');
					column.setAttribute('data-depth', browser.depth);

					column.addEventListener('click', function(event) {
						if (this != event.target) {
							browser.depth = this.getAttribute('data-depth');
							for(var i = browser.depth; i < browser.container.children.length;) {
								browser.container.removeChild(browser.container.children[i]);
							}
						}
					});
					browser.container.appendChild(column);
				} else {
					column = browser.container.children[browser.depth];
				}

				for(var i = 0, folder = null; folder = files[i]; i++) {
					var row = document.createElement('div');
					row.classList.add('row');
					row.classList.add(folder.type);
					row.setAttribute('data-id', folder.id);

					if(folder.type === 'link') {
						row.innerHTML = '<a href="'+folder.address+'">'+folder.name+"</a>";
					} else if (folder.type === 'file') {
						row.innerHTML = '<a href="' + self.parser.parse( '{{ url('download', {'id': ('#{id}'|raw)}) }}', folder)+'">'+folder.name+'</a>';
					} else {
						row.innerHTML = folder.name;
						row.addEventListener('click', function(event) {
							self.notifications.wait();
								self.settings.browser.selected = this.getAttribute('data-id');
								self.sendRequest(self.generateUrl('get', this.getAttribute('data-id')), null, function(json, self) {
								if (json.success) {
									browser.addColumn(json.data[0].children, self);
								} else {
									self.notifications.failure(json.message);
								}
								self.notifications.ready();
							});
						});
					}
					row.addEventListener('click', function(event) {
						var selected = this.parentNode.querySelector('.selected');
						if (selected) selected.classList.remove('selected');
						this.classList.add('selected');
					});

					
					column.appendChild(row);
				}
			},
			'select': function(value) {
				value = value || this.selected;
				var select = document.querySelector('#form_parent');
				select.value = value;
				if (select.value !== value) {
					var option = document.createElement('option');
					option.name = option.value = value;
					select.appendChild(option);
				}
				select.value = value;
			}
		},
		'listeners': [
			{
				'selector': 'body',
				'event': 'loader-init',
				'fn': function(event, object, self) {
					self.sendRequest(self.generateUrl('find'), 'parent=', function(json, self) {
						self.settings.browser.addColumn(json.data, self);
						self.notifications.ready();
					});			
				}
			},
			{
				'selector': '.form_layer, .form_exit',
				'fn': function(event, object, self) {
					if (event.target === object)
					self.forms.close();
				}
			},
			{
				'selector': '.add_thing',
				'fn': function(event, object, self) {
					// check to make sure somethings selected
					self.forms.switch(object.getAttribute('data-action'));
					self.forms.open();
				}
			}
		],
		'form': {
			'settings': {
				'folder': {
					'before': function(form, container, self, newEntity, toHide) {
						var entity = self.settings.entity;
						self.settings.entity = newEntity?newEntity:'folder';
						form.action = self.generateUrl('create');
						container.classList.add('shown');
						self.settings.entity = entity;

						var others = form.querySelectorAll(toHide?toHide:'.link, .file');
						for (var i = 0, other = null; other = others[i]; i++) {
							other.style.display = 'none';
							inputs = other.querySelectorAll('input, textarea, select');
							for (var j = 0, input = null; input = inputs[j]; j++) {
								input.disabled = 'disabled';
							}
						}

						self.settings.browser.select();

					},
					'onsubmit': function(event, form, container, self, type) {
						event.preventDefault();
						self.notifications.wait();
						container.classList.remove('shown');

						self.postForm(null, form, function(json) {
							self.notifications.ready();
							if (json.success) {
								// add folder or reload parent
								self.notifications.success('Folder added.');
								self.forms.close();
							} else {
								self.notifications.failure(json.message);
								container.classList.add('shown');
							}
						});
					},
					'after': function(form, container, self, toShow) {
						container.classList.remove('shown');
						form.action="";

						var others = form.querySelectorAll(toShow?toShow:'.link, .file');
						for (var i = 0, other = null; other = others[i]; i++) {
							other.style.display = 'block';
							inputs = other.querySelectorAll('input, textarea, select');
							for (var j = 0, input = null; input = inputs[j]; j++) {
								input.disabled = false;
							}
						}
					}
				},
				'file': {
					'before': function(form, container, self) {
						self.settings.form.settings.folder.before(form, container, self, 'file', '.folder, .link');
					},
					'onsubmit': function(event, form, container, self) {
						self.settings.form.settings.folder.onsubmit(event, form, container, self, 'file');
					},
					'after': function(form, container, self) {
						self.settings.form.settings.folder.after(form, container, self, '.folder, .link');
					}
				},
				'link': {
					'before': function(form, container, self) {
						self.settings.form.settings.folder.before(form, container, self, 'link', '.folder, .file');
					},
					'onsubmit': function(event, form, container, self) {
						self.settings.form.settings.folder.onsubmit(event, form, container, self, 'link');
					},
					'after': function(form, container, self) {
						self.settings.form.settings.folder.after(form, container, self, '.folder, .file');
					}
				}
			}
		}
	});
	</script>
{% endblock %}

{% extends 'BioPublicBundle::main.html.twig' %}

{% block head %}
	{{ parent() }}

	{% stylesheets 'bundles/biofolder/css/folder2.css' filter="cssrewrite" output="css/*.css" %}
		<link rel="stylesheet" href="{{ asset_url }}" />
	{% endstylesheets %}

	{% javascripts 'bundles/bioexam/js/Loader.js'
				   'bundles/bioexam/js/Parser.js'
				   'bundles/bioexam/js/Notify.js'
				   'bundles/bioexam/js/Lister.js' %}
		<script src="{{asset_url}}"></script>
	{% endjavascripts %}
{% endblock %}

{% block content %}
	<div class="form_layer">
		<div class="form_container">
			<div class="form_scroller">
				{{ form_start(folderForm) }}
					<div id="form">
						{{form_row(folderForm.name)}}
							<div class="folder">
								{{form_row(folderForm.private)}}
							</div>
							<div class="file">
								{{form_row(fileForm.file)}}
							</div>
							<div class="link">
								{{form_row(linkForm.address)}}
							</div>
							<div style="display:none;">
								{{ form_row(folderForm.parent) }}
							</div>
						{{form_row(folderForm.submit)}}
					</div>
				{{ form_end(folderForm) }}
			</div>
			<div class="form_exit"></div>
		</div>
	</div>

	<div id="box">
		<div class="header" >
		
		</div>
		<div class="content">

		</div>
		<div class="footer">
			<button class="add_thing" type="submit" data-action="folder">Add Folder</button>
			<button class="add_thing" type="submit" data-action="file">Add File</button>
			<button class="add_thing" type="submit" data-action="link">Add Link</button>
			<button class="" type="submit" data-action="delete">Delete</button>
			<button class="" type="submit" data-action="edit">Edit</button>
		</div>
	</div>
{% endblock %}

{% block java %}
	<script>

		var select = function(container, fakeClick) {
			var selected = document.querySelectorAll('.selected:not(.old)');
			for(var i = 0, sel = null; sel = selected[i]; i++) {
				sel.classList.add('old');
			}
			var selected = container.parent.element.querySelector('.selected')
			if (selected) {
				selected.classList.remove('selected');
				selected.classList.remove('old');
			}

			container.element.classList.add('selected');
			container.element.classList.remove('old');

			if (fakeClick) {
				var fn = container.config.listeners['click'];
				if (fn) {
					fn.apply(container, [null, loader]);
				}
			}
		}

		var backTo = function(container) {
			var children = container.parent.children;
			var element;
			console.log(container, children);
			while ((element = children[children.length - 1]) !== container) {
				element.removeSelf();
			}
		}

		var getSelected = function() {
			var all = document.querySelectorAll('.selected');
			var last = all[all.length - 1];
			if (!last || last.classList.contains('old')) {
				return false;
			} else {
				return last.container;
			}
		}

		var setForm = function(selected, type) {
			var others = document.querySelectorAll('form .link, form .folder, form .file');
			for (var i = 0, other = null; other = others[i]; i++) {
				if (other.classList.contains(type)) {
					other.style.display = 'block';
				} else {
					other.style.display = 'none';
				}
				inputs = other.querySelectorAll('input, textarea, select');
				for (var j = 0, input = null; input = inputs[j]; j++) {
					if (other.classList.contains(type)) {
						input.disabled = false;
					} else {
						input.disabled = 'disabled';
					}
				}
			}

			var select = document.querySelector('#form_parent');
			select.value = selected.data.id;
			if (select.value !== selected.data.id) {
				var option = document.createElement('option');
				option.name = option.value = selected.data.id;
				select.appendChild(option);
			}
			select.value = selected.data.id;
		}

		loader = new Loader({
			'url': "{{ url('main_page') }}crud/",
			'bundle': 'folder',
			'entity': 'filebase',
			'container': new Container({
				'element': document.querySelector('#box .content'),
				'classes': ['content'],
				'createChildren': function(data, context) {
					for (var i = 0, child = null; child = data[i]; i++) {
						this.addChild(
							new Container({
								'type': 'div',
								'classes': ['column'],
								'data': child,
								'sortFn': function(a, b) {
									if (a.data.order === b.data.order) {
										return a.data.name < b.data.name;
									} else {
										return parseInt(a.data.order) < parseInt(b.data.order);
									}
								},
								'createChildren': function(data, context) {
									for (var i = 0, child = null; child = data[i]; i++) {
										this.addChild(
											new Container({
												'type': 'div',
												'classes': ['row', child.type],
												'data': child,
												'text': child.name,
												'listeners': {
													'click': function(event, loader) {
														var self = this;

														backTo(self.parent);
														if (self.data.type === 'folder') {
															loader.notify.wait();
															var url = loader.generateUrl('get', self.data.id, {
																'entity': 'folder'
															});
															loader.sendRequest(url, null, function(event, loader) {
																if (this.success) {
																	loader.settings.container.createChild(this.data[0].children, loader);
																	loader.notify.ready();
																	select(self);
																} else {
																	loader.notify.failure(this.message);
																}
															});
														} else {
															select(self);
															// add preview
															self.parent.parent.addChild(
																new Container({
																	'type': 'div',
																	'classes': ['column', 'preview'],
																	'data': self.data,
																	'createChildren': function(data, context) {
																		var text = '';
																		text+= '<div class="icon '+data.type+'"></div>';
																		text+= '<div class="info">'+data.name+'</div>';
																		this.element.innerHTML = text;
																	},
																	'listeners': {
																		'click': function(event, loader) {
																			// calls outer scopes dblclick listener
																			self.config.listeners.dblclick.call(this, event, loader); 
																		}
																	},
																	'pass': [context]
																}).createChildren(self.data, context)
															);
														}
													},
													'dblclick': function(event, loader) {
														if (this.data.type !== 'folder') {
															var url;
															if (this.data.type === 'link') {
																url = this.data.address;
															} else if (this.data.type === 'file') {
																url = loader.parser.parse("{{ url('download', {'id': 'zzzz'})|replace({'zzzz': '#{id}'}) }}", this.data);
															}
															window.open(url, '_blank');
														}
													}
												},
												'pass': [context]
											})
										);
									}
								}
							}).createChildren(child, context)
						);
					}
				}
			}),
			'listeners': [
				{
					'selector': null,
					'event': 'init',
					'fn': function(event, object, self) {
						self.sendRequest(self.generateUrl('find'), 'parent=', function(event, self) {
							if (this.success) {
								self.settings.container.createChild(this.data, self);
								self.notify.ready();
							} else {
								self.notify.failure(this.message);
							}
						});
					}
				},
				{
				'selector': '.form_layer, .form_exit',
					'fn': function(event, object, self) {
						if (event.target === object)
						self.forms.close();
					}
				},
				{
					'selector': 'button.add_thing',
					'fn': function(event, object, self) {
						var selected = getSelected();
						if (!selected || selected.data.type !== 'folder') {
							self.notify.failure('You must select a folder.');
						} else {
							self.forms.data.form._action = object.getAttribute('data-action');
							self.forms.data.form._selected = selected;
							self.forms.open('add');
						}
					}
				},
				{
					'selector': 'button[data-action=delete]',
					'fn': function(event, object, self) {
						self.notify.wait();
						var selected = getSelected();
						if (!selected) {
							self.notify.failure('You must select something to delete.');
						} else {
							self.sendRequest(self.generateUrl('delete', selected.data.id), null, function(event, self) {
								if (this.success) {

									// select next logical element
									var parent = selected.parent;
									var next = selected.getNextSibling();
									var previous = selected.getPreviousSibling();

									if (next) {
										backTo(parent);
										select(next, true);
									} else if (previous) {
										backTo(parent);
										select(previous, true);
									} else if (parent.getPreviousSibling()) {
										var old = parent.getPreviousSibling().element.querySelector('.selected');
										backTo(parent.getPreviousSibling());
										if (old) {
											select(old.container, true);
										}
									}
									selected.removeSelf();
									self.notify.success('Deleted ' + selected.data.type + '.');
								} else {
									self.notify.failure(this.message);
								}
							});
						}
					}
				},
				{
		 			'selector': 'button[data-action=edit]',
		 			'fn': function(event, object, self) {
		 				var selected = getSelected();
		 				if (!selected) {
		 					self.notify.failure('You must selected something to edit.');
		 				} else {
		 					self.forms.data.form._selected = selected;
		 					self.forms.open('edit');
		 				}
		 			}
		 		}
			],
			'form': {
				'settings': {
					'add': {
						'before': function(container, self) {
							this.action = self.generateUrl('create', null, {
								'entity': this._action
							});
							setForm(this._selected, this._action);
						},
						'onsubmit': function(event, container, self) {
							event.preventDefault();
							self.notify.wait();

							container.classList.remove('shown');
							var form = this;

							self.postForm(null, this, function(event, self) {
								if (this.success) {
									self.notify.success('Added '+form._action+'.');
									form._selected.parent.getNextSibling().createChildren(this.data, self);
									self.forms.close();
								} else {
									self.notify.failure(this.message);
									container.classList.add('shown');
								}
							})
						}
					},
					'edit': {
						'before': function(container, self) {
							self.notify.wait();
							this.action = self.generateUrl('edit', this._selected.data.id, {
								'entity': this._selected.data.type
							});
							var url = self.generateUrl('get', this._selected.data.id, {
								'entity': this._selected.data.type
							});

							self.sendRequest(url, null, function(event, self) {
								if (this.success) {
									self._handleForm(this.form);
									self.notify.ready();
								} else {
									self.notify.failure(this.message);
								}
							});
							setForm(this._selected, this._selected.data.type);
						},
						'onsubmit': function(event, container, self) {
							event.preventDefault();
							self.notify.wait();
							container.classList.remove('shown');

							var form = this;
							self.postForm(null, this, function(event, self) {
								if (this.success) {
									backTo(form._selected.parent);
									self.notify.success('Edited ' + form._selected.data.type + '.');

									// create and store new object by intercepting the createChildren call
									var temp = new Container();
									form._selected.parent.config.createChildren.call(temp ,this.data, self);
									var child = temp.children[0];

									form._selected.parent.addChild(child);
									form._selected.removeSelf();
									select(child, true); // make sure new child is selected
									self.forms.close();
								} else {
									self.notify.failure(this.message);
									container.classList.add('shown');
								}
							});
						}
					}
				}
			}
		});
	</script>
{% endblock %}
